//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Inputs/TurrentInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @TurrentInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @TurrentInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""TurrentInputs"",
    ""maps"": [
        {
            ""name"": ""TurrentRotation"",
            ""id"": ""7c649dfc-374c-42f6-9e7d-0a49cc0ee979"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ebd35ab9-8033-4487-a514-9f755bf5b56a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""fc7338ff-a27e-4240-87c5-252764f22302"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""40723f10-f1f4-4a8b-abb6-324b71113a88"",
                    ""path"": ""<Keyboard>/numpad8"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""79a27ef1-409e-45b1-a71c-d58d453cbdb7"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Negative"",
                    ""id"": ""5883be94-79bc-4c1d-965b-7c0da93242f8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Positive"",
                    ""id"": ""bb2a3ca6-2e96-493c-a8ef-532691db5853"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // TurrentRotation
        m_TurrentRotation = asset.FindActionMap("TurrentRotation", throwIfNotFound: true);
        m_TurrentRotation_Move = m_TurrentRotation.FindAction("Move", throwIfNotFound: true);
        m_TurrentRotation_Fire = m_TurrentRotation.FindAction("Fire", throwIfNotFound: true);
    }

    ~@TurrentInputs()
    {
        UnityEngine.Debug.Assert(!m_TurrentRotation.enabled, "This will cause a leak and performance issues, TurrentInputs.TurrentRotation.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TurrentRotation
    private readonly InputActionMap m_TurrentRotation;
    private List<ITurrentRotationActions> m_TurrentRotationActionsCallbackInterfaces = new List<ITurrentRotationActions>();
    private readonly InputAction m_TurrentRotation_Move;
    private readonly InputAction m_TurrentRotation_Fire;
    public struct TurrentRotationActions
    {
        private @TurrentInputs m_Wrapper;
        public TurrentRotationActions(@TurrentInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_TurrentRotation_Move;
        public InputAction @Fire => m_Wrapper.m_TurrentRotation_Fire;
        public InputActionMap Get() { return m_Wrapper.m_TurrentRotation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TurrentRotationActions set) { return set.Get(); }
        public void AddCallbacks(ITurrentRotationActions instance)
        {
            if (instance == null || m_Wrapper.m_TurrentRotationActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TurrentRotationActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
        }

        private void UnregisterCallbacks(ITurrentRotationActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
        }

        public void RemoveCallbacks(ITurrentRotationActions instance)
        {
            if (m_Wrapper.m_TurrentRotationActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITurrentRotationActions instance)
        {
            foreach (var item in m_Wrapper.m_TurrentRotationActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TurrentRotationActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TurrentRotationActions @TurrentRotation => new TurrentRotationActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface ITurrentRotationActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
    }
}
